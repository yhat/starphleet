description "Starphleet monitor all ordered services for autodeployment"

start on starphleet_pulse

script
  source `which tools`
  #auto deploy each ordered service, really need to use grep here
  #find doesn't work out on that / pattern
  for order in $(find "${HEADQUARTERS_LOCAL}" | grep '/orders$')
  do
    ORDER=$(echo "${order}" | sed -e 's[/orders$[[')
    #make a place for the orders to be managed while running, this is separate
    #from the order files in the headquarters
    ORDER=${CURRENT_ORDERS}/$(echo "${ORDER}" | sed -e "s[${HEADQUARTERS_LOCAL}/\?[[")
    mkdir -p "${ORDER}"
    #have the orders in the current run location for easy self reference
    #link so as the headquarters is updated it stays fresh
    if [ ! -f "${ORDER}/orders" ]; then
      ln -s "${order}" "${ORDER}/orders"
    fi
    LOCAL="${ORDER}/git"
    #get the 'last' autodeploy directive in the order file, this is going
    #through a file since we are running a subshell with bash below
    AUTODEPLOY=${TMPDIR-/tmp}/$$
    trap 'rm -rf ${AUTODEPLOY}' EXIT
    autodeploy () { echo $1 > ${AUTODEPLOY}; }
    export -f autodeploy
    export AUTODEPLOY
    bash "${order}"
    #run the order as a whole script with the autodeploy function defined above
    #this lets folks get creative in orders files as needed
    if initctl list | grep "${LOCAL}" > /dev/null; then
      echo -n
    else
      REMOTE=$(cat "${AUTODEPLOY}")
      if [ -n "${REMOTE}" ]; then
        start starphleet_orders local="${LOCAL}" remote="${REMOTE}"
      fi
    fi
  done
  #note, this doesn't clean up deleted services, there are two basic reasons
  #* clients can still be using them
  #* it is problematic to figure out deleted orders
  #so, if you want deleted orders to stop service, you just
  #sudo stop starphleet
  #sudo start starphleet
end script
