#!/usr/bin/env bash
### Usage:
###    starphleet-containerize <git_url> <container_name> [<orders_script>]
### --help
###
### Make a new container for a git repository service.
### This uses Heroku buildpacks, and will detect how to create your
### container automatically.
###
### Once this script is done, you will have a running container.
###
### The container will have a layout with the following special directories:
### /var/starphleet - This mounts back to /var/starphleet on the host
### /app - Your git repository will be here
### /block - Handy way to block until the container has networking
### /start - This is the Heroku style start script
### /web - This is a shortcut for /start web
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"

set -e

#places for things to live
STARPHLEET_BASE="${STARPHLEET_BASE:-https://s3-us-west-2.amazonaws.com/starphleet/starphleet-base.tgz}"
CONTAINER_NAME="${container_name}"
CONTAINER_ROOT=/var/lib/lxc/${CONTAINER_NAME}/rootfs

#configuration, this is the place to mount directories on the host computer
#into the container
#note: this takes effect after the initial create, which generates the
#inital container configuration, and this is tacked on the end
#so we are starting the container twice
CONTAINER_CONF=${TMPDIR-/tmp}/${CONTAINER_NAME}.conf
cat << EOF > ${CONTAINER_CONF}
lxc.mount.entry = /var/starphleet ${CONTAINER_ROOT}/var/starphleet none bind,rw 0 0
EOF
trap 'rm -rf ${CONTAINER_CONF}' EXIT

#actually make a container here
info creating ${CONTAINER_NAME}
if lxc-ls | grep "^${CONTAINER_NAME}$" > /dev/null; then
  warn already built ${CONTAINER_NAME}
  lxc-start --name ${CONTAINER_NAME} -d
  starphleet-lxc-wait ${CONTAINER_NAME} RUNNING
  exit 0
else
  if [ -f "${HEADQUARTERS_LOCAL}/containers/${STARPHLEET_BASE}" ]
  then
    #base container from a headquarters container script
    starphleet-containermake "${STARPHLEET_BASE}" "${HEADQUARTERS_LOCAL}/containers/${STARPHLEET_BASE}"
  elif [ -f "/var/starphleet/containers/${STARPHLEET_BASE}" ]
  then
    #base container from a starphleet provided container script
    starphleet-containermake "${STARPHLEET_BASE}" "/var/starphleet/containers/${STARPHLEET_BASE}"
  else
    #base container from a remote source, try to restore/get treating the base as a file/url
    get_HASH "${STARPHLEET_BASE}"
    starphleet-lxc-restore "${HASH}" "${STARPHLEET_BASE}"
    STARPHLEET_BASE="${HASH}"
  fi
  #clone on top of the base image, this is just to save disk space
  #this command can be problematic, giving off an error about
  #'cannot snapshot a directory', keptin :)
  until lxc-clone -o "${STARPHLEET_BASE}" -n "${CONTAINER_NAME}" -s; do
    sleep 1
  done
  #mounts and files, always can see starphleet
  test -d ${CONTAINER_ROOT}/var/starphleet || mkdir ${CONTAINER_ROOT}/var/starphleet
  #and yes, here is the repo to containerize
  REMOTE=$(echo "${git_url}" | awk -F '#' '{print $1;}')
  BRANCH=$(echo "${git_url}" | awk -F '#' '{print $2;}')

  #get the source code, and get on the right branch
  git clone "${REMOTE}" "${CONTAINER_ROOT}/app" > /dev/null
  pushd "${CONTAINER_ROOT}/app" > /dev/null
  chmod -R 0777 .
  if [ -n "${BRANCH}" ]; then
    git checkout "${BRANCH}"
  fi
  popd > /dev/null
  cat ${CONTAINER_CONF} >> ${CONTAINER_ROOT}/../config
  #block script, makes sure we are on the air
  cp "${DIR}/starphleet-wait-network" "${CONTAINER_ROOT}/block"
  #build script, uses buildpacks
  cp "${DIR}/starphleet-buildpack-script" "${CONTAINER_ROOT}/buildpack"
  # environment, enforced by our buildpack script, so the preference order is:
  # * repository specific variables, basically our dev settings
  # * headquarters/.../orders variables, service level overrides
  # * headquarters/.starphleet variables, global overrides
  #orders script
  ORDERS="${orders_script:-${DIR}/orders}"
  cat "${DIR}/tools" > "${CONTAINER_ROOT}/.orders"
  cat "${ORDERS}" >> "${CONTAINER_ROOT}/.orders"
  #starphleet script
  test -f "${HEADQUARTERS_LOCAL}/.starphleet" && cat "${HEADQUARTERS_LOCAL}/.starphleet" > "${CONTAINER_ROOT}/.starphleet"
  #and finally, the buildpack web start
  echo 'test -f /.pid && kill -- -$( ps opgid= $(cat /.pid) | tr -d " " )' > "${CONTAINER_ROOT}/kill"
  chmod +x "${CONTAINER_ROOT}/kill"
  echo '/kill; setsid /start web;' > "${CONTAINER_ROOT}/web"
  chmod +x "${CONTAINER_ROOT}/web"
  #fire up the container
  lxc-start --name ${CONTAINER_NAME} -d
  starphleet-lxc-wait ${CONTAINER_NAME} RUNNING
  info building ${CONTAINER_NAME}
  #once the network is up, make a workable container with the buildpack
  lxc-attach --name ${CONTAINER_NAME} -- bash /block
  lxc-attach --name ${CONTAINER_NAME} -- bash /buildpack
  #now we have a running, built container
  info built ${CONTAINER_NAME}
fi
